#!/bin/bash
# Launcher for OCR PDF

# DEPENDENCIES
# gjs
# ocrmypdf

# OPTIONAL DEPENDENCIES
# zenity

ARGS="$@"
APP_NAME="OCR PDF"

# Start from GUI?
GUI=false
if [[ $(readlink -f /proc/$(ps -o ppid:1= -p $$)/exe) != $(readlink -f "$SHELL") ]]; then
  GUI=true
fi

ERR_DEPENDENCIES=()

# gjs is installed?
GJS_VERSION=$(gjs --version)
ERR_GJS=$?
if [[ $ERR_GJS != 0 ]]; then
  ERR_DEPENDENCIES+=("gjs")
fi

# ocrmypdf is installed?
OCRMYPDF_VERSION=$(ocrmypdf --version)
ERR_OCRMYPDF=$?
if [[ $ERR_OCRMYPDF != 0 ]]; then
  ERR_DEPENDENCIES+=("ocrmypdf")
fi

# Zenity is installed?
ZENITY_VERSION=$(zenity --version)
ERR_ZENITY=$?

# Determine Application absolute path
LAUNCHER_FULL_PATH="$(realpath "$0")"
LAUNCHER_NAME="$(basename "$0")"
APP_PATH="${LAUNCHER_FULL_PATH::(-${#LAUNCHER_NAME})}"

function main()
{
  clear
  if [[ ${#ERR_DEPENDENCIES[@]} == 0 ]]; then
    cd "${APP_PATH}"
    
    # Parameters
    for ((INDEX=0; INDEX <= ${#ARGS[@]}; INDEX++)); do
      case "${ARGS[${INDEX}]}" in
        "broadway")
          # Broadway server is running?
          BROADWAY_PID=$(pidof broadwayd)
          if [[ $? == 0 ]]; then
            # Application will be launched in broadway backend
            export GDK_BACKEND=broadway
            export BROADWAY_DISPLAY=:1
          else
            show_error_message "Broadway server is not running.\nStart it with:\nbroadwayd -p 8080 :1"
          fi
        ;;
        "light")
          export GTK_THEME=Adwaita:light
        ;;
        "dark")
          export GTK_THEME=Adwaita:dark
        ;;
        "debug")
          export GTK_DEBUG=interactive
        ;;
        "--theme="*)
          NAME=${ARGS[${INDEX}]}
          export GTK_THEME="${NAME:8}"
        ;;
        "--help")
          _show_message "Help for ${LAUNCHER_NAME}" "\n${LAUNCHER_NAME} [options]\n\noptions:\nlight     launch application with Adwaita light theme\ndark      launch application with Adwaita dark theme\n--help    show this message and exit"
          exit
        ;;
      esac
    done
    
    MESSAGE_ON_CLOSE=false
    gjs main.js "$@"
    if [[ $? != 0 ]]; then
      show_error_message "${APP_NAME} closed unexpectedly."
    elif [[ $MESSAGE_ON_CLOSE == true ]]; then
      show_info_message "Security message: ${APP_NAME} closed correctly."
    fi
  else
    ERR_MESSAGE="${APP_NAME} can't start.\nPlease install ${ERR_DEPENDENCIES[@]} package"
    if [[  ${#ERR_DEPENDENCIES[@]} > 1 ]]; then
      ERR_MESSAGE+="s"
    fi
    ERR_MESSAGE+="."
    show_error_message "${ERR_MESSAGE}"
  fi
}

function to_lowercase()
{
  echo "$1" | tr '[:upper:]' '[:lower:]'
}

function to_uppercase()
{
  echo "$1" | tr '[:lower:]' '[:upper:]'
}

################################
# Show message with/out zenity #
################################
MESSAGE_RESPONSE=""
function _show_message()
{
  MESSAGE_RESPONSE=""
  TYPE="$1"
  MESSAGE="$2"
  if [[ ${GUI} == true ]] && [[ ${ERR_ZENITY} == 0 ]]; then
    zenity --"${TYPE}" --ellipsize --title="${APP_NAME} Launcher" --text="${MESSAGE}"
    if [[ "${TYPE}" == "question" ]] && [[ $? == 0 ]]; then
      MESSAGE_RESPONSE=0
    else
      MESSAGE_RESPONSE=1
    fi
  else
    TYPE=$(to_uppercase "${TYPE}")
    
    if [[ "${TYPE}" == "QUESTION" ]]; then
      while : ; do
        read -n 1 -p "${MESSAGE} [Y/N]" MESSAGE_RESPONSE
        printf "\n"
        MESSAGE_RESPONSE=$(to_uppercase "${MESSAGE_RESPONSE}")
        if [[ "${MESSAGE_RESPONSE}" == "Y" ]] || [[ "${MESSAGE_RESPONSE}" == "N" ]]; then
          if [[ "${MESSAGE_RESPONSE}" == "Y" ]]; then
            MESSAGE_RESPONSE=0
          else
            MESSAGE_RESPONSE=1
          fi
          break
        fi
      done
    else
      printf "${TYPE}: ${MESSAGE}\n"
    fi
  fi
  return ${MESSAGE_RESPONSE}
}

function show_info_message()
{
  _show_message "info" "$1"
}

function show_warning_message()
{
  _show_message "warning" "$1"
}

function show_error_message()
{
  _show_message "error" "$1"
}

# RETURN
# 0: if response is true
# 1: if response is false
# any other output: DEBUG & PRE-ALPHA CONCEPT
function show_question_message()
{
  _show_message "question" "$1"
  STATUS=$?
  echo $STATUS
}

# Everything has been initialized. The script can start.
main "$@"
